
1. 리소스그룹
리소스그룹명:  team4

2.쿠버네티스서비스(클러스터)
클러스터명:  team4-aks
지역: 한국중부
버전 : 1.17.11
노드수: 3개

3.Container Registry
레지스트리명:  team04acr

==========================================================
* 클러스터에 배포 (AZURE)
==========================================================
--콘솔열어서 콘솔에서 클러스터 연결하기(az login)
--az acr login --name team04acr
4. Azure 클러스터 연결
az aks get-credentials --resource-group team4 --name team4-aks

5. Azure 클러스터에 레지스트리 붙이기
az aks update -n team4-aks -g team4 --attach-acr team04acr

6. 확인
--kubectl delete deploy,service --all
kubectl get all
kubectl config current-context

==========================================================
* 클러스터에 kafka 설치
==========================================================
6. Kafka 설치
curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get | bash
kubectl --namespace kube-system create sa tiller
kubectl create clusterrolebinding tiller --clusterrole cluster-admin --serviceaccount=kube-system:tiller
helm init --service-account tiller
kubectl patch deploy --namespace kube-system tiller-deploy -p '{"spec":{"template":{"spec":{"serviceAccount":"tiller"}}}}'
helm repo add incubator http://storage.googleapis.com/kubernetes-charts-incubator
helm repo update
helm install --name my-kafka --namespace kafka incubator/kafka

7. Kafka 네임스페이스생성
kubectl create ns kafka

8. kafka 토픽만들기 (accommodation 이름으로토픽생성)
kubectl -n kafka exec my-kafka-0 -- /usr/bin/kafka-topics --zookeeper my-kafka-zookeeper:2181 --topic accommodation --create --partitions 1 --replication-factor 1

8. kafka 토픽만들기 (hotelmanage 이름으로토픽생성)
kubectl -n kafka exec my-kafka-0 -- /usr/bin/kafka-topics --zookeeper my-kafka-zookeeper:2181 --topic hotelmanage --create --partitions 1 --replication-factor 1

-토픽 목록 확인
kubectl -n kafka exec my-kafka-0 -- /usr/bin/kafka-topics --zookeeper my-kafka-zookeeper:2181 --list

-[참고]토픽 메세지 생성
kubectl -n kafka exec -ti my-kafka-0 -- /usr/bin/kafka-console-producer --broker-list my-kafka:9092 --topic accommodation
-[참고]토픽 확인
kubectl -n kafka exec -ti my-kafka-0 -- /usr/bin/kafka-console-consumer --bootstrap-server my-kafka:9092 --topic accommodation --from-beginning

==========================================================
*코드 패키징
==========================================================
* Lab에 필요한 리소스 내려받기
mkdir accommodation
cd accommodation

git clone https://github.com/parkchangseon/Notice.git
git clone https://github.com/parkchangseon/main.git
git clone https://github.com/parkchangseon/RoomInfo.git
git clone https://github.com/parkchangseon/Room.git
git clone https://github.com/parkchangseon/Reservation.git
git clone https://github.com/parkchangseon/Payment.git
git clone https://github.com/parkchangseon/Gateway.git
git clone https://github.com/parkchangseon/Promotion.git


* 마이크로서비스 배포
-객실(Room) 서비스 
cd Room
mvn package -Dmaven.test.skip=true
-예약(Room) 서비스 
cd Reservation
mvn package -Dmaven.test.skip=true
-결제(Payment) 서비스 
cd Payment
mvn package -Dmaven.test.skip=true
-알림(Notice) 서비스 
cd Notice
mvn package -Dmaven.test.skip=true
-Gateway(Gateway) 서비스 
cd Gateway
mvn package -Dmaven.test.skip=true
cd RoomInfo
mvn package -Dmaven.test.skip=true
cd Promotion
mvn package -Dmaven.test.skip=true

==========================================================
*클러스터에 배포 (AZURE)
==========================================================
* 도커라이징 - Azure 컨테이너 레지스트리 로그인
az acr login --name team04acr --expose-token
* 도커라이징 - Azure 레지스트리에 도커 이미지 푸시하기
az acr build --registry team04acr --image team04acr.azurecr.io/room:latest .
* 컨테이너라이징-디플로이 생성
kubectl create deploy room --image=team04acr.azurecr.io/room:latest
* 컨테이너라이징-서비스 생성
kubectl expose deploy room --type="ClusterIP" --port=8080

* 서비스 확인
kubectl get po
kubectl get all

az acr build --registry team04acrpark --image team04acrpark.azurecr.io/reservation:latest .
kubectl create deploy reservation --image=team04acrpark.azurecr.io/reservation:latest
kubectl expose deploy reservation --type="ClusterIP" --port=8080

az acr build --registry team04acrpark --image team04acrpark.azurecr.io/payment:latest .
kubectl create deploy payment --image=team04acrpark.azurecr.io/payment:latest
kubectl expose deploy payment --type="ClusterIP" --port=8080

az acr build --registry team04acrpark --image team04acrpark.azurecr.io/notice:latest .
kubectl create deploy notice --image=team04acrpark.azurecr.io/notice:latest
kubectl expose deploy notice --type="ClusterIP" --port=8080

az acr build --registry team04acrpark --image team04acrpark.azurecr.io/room:latest .
kubectl create deploy room --image=team04acrpark.azurecr.io/room:latest
kubectl expose deploy room --type="ClusterIP" --port=8080

az acr build --registry team04acrpark --image team04acrpark.azurecr.io/roominfo:latest .
kubectl create deploy roominfo --image=team04acrpark.azurecr.io/roominfo:latest
kubectl expose deploy roominfo --type="ClusterIP" --port=8080

az acr build --registry team04acrpark --image team04acrpark.azurecr.io/promotion:latest .
kubectl create deploy promotion --image=team04acrpark.azurecr.io/promotion:latest
kubectl expose deploy promotion --type="ClusterIP" --port=8080

mvn clean
docker build -t team04acr.azurecr.io/gateway:latest .
mvn package -Dmaven.test.skip=true
az acr build --registry team04acrpark --image team04acrpark.azurecr.io/gateway:latest .
kubectl create deploy gateway --image=team04acrpark.azurecr.io/gateway:latest
kubectl expose deploy gateway --type="ClusterIP" --port=8080

-- httpie 실행
kubectl exec -it httpie bin/bash 

--------------------------------------------------------------------------------------------------------------------------------
* 새버전으로의 배포 시작
mvn package -Dmaven.test.skip=true
az acr build --registry team04acr --image team04acr.azurecr.io/room:latest .
kubectl set image deploy room room=team04acr.azurecr.io/room:latest

siege -c100 -t10S -v --content-type "application/json" 'http://room:8080/rooms POST {"roomStatus": "EMPTY", "roomName":"DERUX"}'


* 설정파일(YAML)을 통한 Pod 배포 (직접 타이핑)
kubectl create -f declarative-pod.yaml
kubectl get pods

==========================================================
httpie 설치
==========================================================
cat <<EOF | kubectl apply -f -
apiVersion: "v1"
kind: "Pod"
metadata: 
  name: httpie
  labels: 
    name: httpie
spec: 
  containers: 
    - name: httpie
      image: clue/httpie
      command:
        - sleep
        - "360000"
EOF
 kubectl exec -it httpie bin/bash
==========================================================

==========================================================
*시즈 설치
apt-get update -y
apt-get install -y siege
==========================================================


<시나리오>
#객실등록
http POST http://room:8080/rooms roomType="DERUX" roomStatus="EMPTY" roomName="DERUX ROOM" roomQty=10 roomPrice=1200000\

#객실 조회
http http://roomInfo:8080/roomInfoes 

#예약요청 (객실이 있을경우)
http post http://reservation:8080/reservations customerName="PARK CHANG SEON" customerId=9805 reserveStatus="reserve" roomNumber=101 paymentPrice=120000

#결제요청
http post http://reservation:8080/reservations reservationNumber=1 reserveStatus="payment" customerName="PARK CHANG SEON" customerId=9805 roomNumber=101 paymentPrice=120000

#결제 내역 조회
http http://payment:8080/payments

#Check Out
http post http://reservation:8080/reservations reservationNumber=1 reserveStatus="checkOut" customerName="PARK CHANG SEON" customerId=9805 roomNumber=101 paymentPrice=120000

--체크아웃 후 객실조회
http http://roomInfo:8080/roomInfoes

==========================================================
* POD 중지하기
kubectl scale deploy payment --replicas=0
==========================================================

==========================================================
-서킷브레이커를 통한 장애격리
siege -c10 -t10S -r10 --content-type "application/json" 'http http://payment:8080/payments'
kubectl get deploy payment -w

==========================================================
- 스케일아웃
siege -c100 -t30S -r10 --content-type "application/json" 'http http://room:8080/rooms {"roomStatus": "EMPTY", "roomName":"DERUX}'
:

- CQRS
: 고객이 예약현황 조회 시 예약내역+객실상태를 같이 조회

- Readyness  Probe 설정을 통해 무정지 CI/CD 테스트
:

- Liveness 를 통한 셀프힐링 
:



